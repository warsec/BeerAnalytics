summary(iris)
testidx <- which(1: length(iris[,1]%%5 == 0))
testidx <- which(1:length(iris[,1])%%5 == 0)
testidx
length(iris)
iris
iris[,1]
iristest <- iris[testidx,]
iristrain <- iris[-testidx,]
library(car)
?aapply
?apply
?sapply
install.packages("missForest")
install.packages("missMDA")
install.packages("ltsa")
install.packages("evir")
?prop.test
prop.test(21, 30)
prop.test(21, 30, conf.level = 0.95)
real = function(t) {
reali <- exp(-0.2*t) - 2*(exp(-0.3*t) - exp(-0.2*t))
}
real = function(t) {
reali <- exp(-0.2*t) - 2*(exp(-0.3*t) - exp(-0.2*t))
reali
}
real(1)
real(2)
real(3)
real(4)
real(5)
exp(-((.0034+.0105)*100)
s
s = exp(-((.0034+.0105)*100)
)
p1 = exp(-((.0034+.0105)*100))
p2 = (0.0034/(.0034+.0105-0.01575))*(exp(-(0.01575*100))-p1)
p3 = (0.0105/(.0034+.0105-0.0015))*(exp(-(0.0015*100))-p1)
r = p1+p2+p3
D(expression(exp(-(a1+a2)*t)),"t")
l1 = 3
l2 = 2
l10 = 6
l20 = 3
p1 = exp(-(3+2))
p2 = (l1/(l1+l2-l20))*(exp(-(l20))-p1)
p3 = (l2/(l1+l2-l10))*(exp(-(l10))-p1)
r = p1+p2+p3
l1 = 3
l2 = 2
l10 = 6
l20 = 3
p1 = exp(-(l1+l2))
p2 = (l1/(l1+l2-l20))*(exp(-(l20))-p1)
p3 = (l2/(l1+l2-l10))*(exp(-(l10))-p1)
r = p1+p2+p3
l1 = 3
l2 = 2
l10 = 6
l20 = 3
p1 = exp(-(l1+l2))
p2 = (l1/(l1+l2-l20))*(exp(-(l20))-p1)
p3 = (l2/(l1+l2-l10))*(exp(-(l10))-p1)
r = p1+p2+p3
l1 = 3/8
l2 = 2/8
l10 = 6/8
l20 = 3/8
p1 = exp(-(l1+l2))
p2 = (l1/(l1+l2-l20))*(exp(-(l20))-p1)
p3 = (l2/(l1+l2-l10))*(exp(-(l10))-p1)
r = p1+p2+p3
library(BayesTree)
bart()
bart()
?bart
bart
install.packages("rUnemploymentData")
install.packages("choroplethrMaps")
data(country.map)
library("choroplethrMaps", lib.loc="~/R/win-library/3.0")
data(country.map)
View(country.map)
library(shiny)
shiny::runApp()
shiny::runApp(app.R)
shiny::runApp()
shiny::runApp()
shiny::runApp(server.R)
shiny::runApp()
library(shiny)
runApp("my_app")
library(choroplethr)
data("df_pop_county")
head(df_pop_county)
county_choropleth(df_pop_county)
data(df_county_demographics)
data(df_county_demographics)
??df_county_demographics
data(df_county_demographics)
install_github("arilamstein/choroplethrZip@v1.4.0")
library(devtools)
install_github("arilamstein/choroplethrZip@v1.4.0")
library(devtools)
install_github("arilamstein/choroplethrZip@v1.4.0")
install.packages("choroplethr")
library(devtools)
install_github("choroplethr", "arilamstein")
library(choroplethr)
install_github("arilamstein/choroplethrZip@v1.4.0")
library(choroplethrZip)
data("df_pop_zip")
head(df_pop_zip)
zip_choropleth(df_pop_zip, state_zoom = "tennestate_zoom")
zip_choropleth(df_pop_zip, state_zoom = "tennessee")
zip_choropleth(df_pop_zip, county_zoom = "37919")
zip_choropleth(df_pop_zip, county_zoom = "47093")
zip_choropleth(df_pop_zip, county_zoom = "47093", reference_map = TRUE)
library(data.table)
library(choroplethr)
library(ggvis)
library(ggplot2)
library(ggmap)
data("crime")
setwd("C:/Users/Warsec/Desktop/Beer")
library(data.table)
library(choroplethr)
library(ggvis)
library(ggplot2)
library(ggmap)
library(plyr)
library(plotly)
library(scales)
brewer <- read.csv("breweries.csv", header = TRUE, na.strings = c("", " ", "NA"))
geo <- read.csv("breweries_geocode.csv")
location <- read.csv("location.csv")
brewer.US <- subset(brewer, country == "United States")
addresses <- brewer.US$name
addresses <- paste0(addresses,",", brewer.US$address1,",", brewer.US$city,",", brewer.US$state,",",
brewer.US$country)
addresses <- paste0(addresses,", ", brewer.US$address1,", ", brewer.US$city,", ", brewer.US$state,
", ", brewer.US$country)
address([1])
address[1]
address[1]
addresses[1]
addresses <- brewer.US$name
addresses <- paste0(addresses,", ", brewer.US$address1,", ", brewer.US$city,", ", brewer.US$state,
", ", brewer.US$country)
addresses[1]
addresses <- brewer.US$name
addresses <- paste0(addresses,", ", brewer.US$address1,", ", brewer.US$city,", ", brewer.US$state,
", ", brewer.US$country, ", ", brewer.US$code)
addresses
geocode(addresses[56])
geocode(addresses[58])
geocode(addresses[59])
#define a function that will process googles server responses for us.
getGeoDetails <- function(address){
#use the gecode function to query google servers
geo_reply = geocode(address, output='all', messaging=TRUE, override_limit=TRUE)
#now extract the bits that we need from the returned list
answer <- data.frame(lat=NA, long=NA, accuracy=NA, formatted_address=NA, address_type=NA, status=NA)
answer$status <- geo_reply$status
#if we are over the query limit - want to pause for an hour
while(geo_reply$status == "OVER_QUERY_LIMIT"){
print("OVER QUERY LIMIT - Pausing for 1 hour at:")
time <- Sys.time()
print(as.character(time))
Sys.sleep(60*60)
geo_reply = geocode(address, output='all', messaging=TRUE, override_limit=TRUE)
answer$status <- geo_reply$status
}
#return Na's if we didn't get a match:
if (geo_reply$status != "OK"){
return(answer)
}
#else, extract what we need from the Google server reply into a dataframe:
answer$lat <- geo_reply$results[[1]]$geometry$location$lat
answer$long <- geo_reply$results[[1]]$geometry$location$lng
if (length(geo_reply$results[[1]]$types) > 0){
answer$accuracy <- geo_reply$results[[1]]$types[[1]]
}
answer$address_type <- paste(geo_reply$results[[1]]$types, collapse=',')
answer$formatted_address <- geo_reply$results[[1]]$formatted_address
return(answer)
}
getGeoDetails("university of tennessee knoxville")
getGeoDetails(addresses[59])
geocode(addresses[59])
addresses <- brewer.US$name
addresses <- paste0(addresses,", ", brewer.US$address1,", ", brewer.US$city,", ", brewer.US$state,
", ", brewer.US$country, ", ", brewer.US$code)
est_brew_locat <- geocode(addresses)
grades <- c(1, 2, 2, 3, 1)
info <- data.frame(
grade = 3:1,
desc = c("Excellent", "Good", "Poor"),
fail = c(F, F, T)
)
id <- match(grades, info$grade)
info[id, ]
info$grade
trims <- c(0, 0.1, 0.2, 0.5)
x <- rcauchy(100)
lapply(trims, function(trim) mean(x, trim = trim))
mean(x)
lapply(trims, mean, x = x)
sapply(brewer, is.numeric())
sapply(brewer, is.numeric
)
vapply(brewer, is.numeric, logical(1))
vapply(brewer, is.numeric)
View(geo)
View(info)
df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2011_february_us_airport_traffic.csv')
View(df)
df$hover <- with(df, paste(airport, city, state, "Arrivals: ", cnt))
# marker styling
m <- list(
colorbar = list(title = "Incoming flights February 2011"),
size = 8, opacity = 0.8, symbol = 'square'
)
# geo styling
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5
)
plot_ly(df, lat = lat, lon = long, text = hover, color = cnt,
type = 'scattergeo', locationmode = 'USA-states', mode = 'markers',
marker = m) %>%
layout(title = 'Most trafficked US airports<br>(Hover for airport)', geo = g)
install.packages("htmlwidgets")
setwd("C:/Users/Warsec/Desktop/Beer")
library(data.table)
library(choroplethr)
library(ggvis)
library(ggplot2)
library(ggmap)
library(plyr)
library(plotly)
library(scales)
plot_ly(df, lat = lat, lon = long, text = hover, color = cnt,
type = 'scattergeo', locationmode = 'USA-states', mode = 'markers',
marker = m) %>%
layout(title = 'Most trafficked US airports<br>(Hover for airport)', geo = g)
View(location)
View(location)
View(est_brew_locat)
summary(est_brew_locat)
?plot_ly
?colorRamp
library(graphics)
